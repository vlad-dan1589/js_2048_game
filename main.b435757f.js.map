{"version":3,"sources":["scripts/main.js"],"names":["body","document","querySelector","rows","querySelectorAll","button","tableScore","messages","winMessage","loseMessage","cells","board","newNumber","gameEnded","clearZeroes","row","filter","element","slide","newRow","i","length","textContent","push","slideLeft","fieldRow","column","updateTile","children","slideRight","reverse","slideUp","fieldColumn","slideDown","hasEmptyTiles","r","c","tile","number","className","innerText","classList","add","addNumber","found","Math","floor","random","randomNuber","moveIsPossible","moveX","moveY","boardColumn","addEventListener","e","contains","remove","forEach","message","boardClone","JSON","stringify","key","some","cell"],"mappings":"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","file":"main.b435757f.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\n// write your code here\nconst body = document.querySelector('body');\n\nconst rows = body.querySelectorAll('tr');\nconst button = document.querySelector('button');\nconst tableScore = body.querySelector('.game-score');\nconst messages = body.querySelectorAll('.message');\nconst winMessage = body.querySelector('.message-win');\nconst loseMessage = body.querySelector('.message-lose');\nconst cells = body.querySelectorAll('.field-cell');\n\nconst board = [\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n];\nconst newNumber = [2, 2, 2, 2, 2, 2, 2, 2, 4, 2];\nlet gameEnded = false;\n\nbutton.addEventListener('click', (e) => {\n  if (!button.classList.contains('restart')) {\n    button.classList.remove('start');\n    button.innerText = 'Restart';\n    button.classList.add('restart');\n  }\n\n  for (let r = 0; r < board.length; r++) {\n    for (let c = 0; c < board.length; c++) {\n      board[r][c] = 0;\n\n      const tile = rows[r].children[c];\n\n      updateTile(tile, 0);\n    }\n  }\n\n  [...messages].forEach(message => message.classList.add('hidden'));\n\n  tableScore.innerText = 0;\n\n  addNumber();\n  addNumber();\n\n  gameEnded = false;\n});\n\ndocument.addEventListener('keydown', (e) => {\n  if (!button.classList.contains('restart') || gameEnded === true) {\n    return;\n  }\n\n  const boardClone = JSON.stringify(board);\n\n  switch (e.key) {\n    case 'ArrowLeft':\n      slideLeft();\n      break;\n\n    case 'ArrowRight':\n      slideRight();\n      break;\n\n    case 'ArrowUp':\n      slideUp();\n      break;\n\n    case 'ArrowDown':\n      slideDown();\n      break;\n  }\n\n  if (boardClone === JSON.stringify(board)) {\n    return;\n  }\n\n  addNumber();\n\n  if ([...cells].some(cell => cell.classList.contains('field-cell--2048'))) {\n    winMessage.classList.remove('hidden');\n    gameEnded = true;\n  }\n\n  if (!moveIsPossible()) {\n    loseMessage.classList.remove('hidden');\n  }\n});\n\nfunction clearZeroes(row) {\n  return row.filter(element => element !== 0);\n}\n\nfunction slide(row) {\n  let newRow = clearZeroes(row);\n\n  for (let i = 0; i < newRow.length; i++) {\n    if (newRow[i] === newRow[i + 1]) {\n      newRow[i] *= 2;\n      newRow[i + 1] = 0;\n\n      tableScore.textContent = +tableScore.textContent + newRow[i];\n    }\n  }\n\n  newRow = clearZeroes(newRow);\n\n  while (newRow.length < 4) {\n    newRow.push(0);\n  }\n\n  return newRow;\n}\n\nfunction slideLeft() {\n  for (let row = 0; row < 4; row++) {\n    const fieldRow = slide(board[row]);\n\n    board[row] = fieldRow;\n\n    for (let column = 0; column < 4; column++) {\n      const tile = rows[row].children[column];\n      const number = board[row][column];\n\n      updateTile(tile, number);\n    }\n  }\n}\n\nfunction slideRight() {\n  for (let row = 0; row < 4; row++) {\n    const fieldRow = slide(board[row].reverse());\n\n    board[row] = fieldRow.reverse();\n\n    for (let column = 0; column < 4; column++) {\n      const tile = rows[row].children[column];\n      const number = board[row][column];\n\n      updateTile(tile, number);\n    }\n  }\n}\n\nfunction slideUp() {\n  for (let column = 0; column < 4; column++) {\n    let fieldColumn = [board[0][column], board[1][column],\n      board[2][column], board[3][column]];\n\n    fieldColumn = slide(fieldColumn);\n\n    board[0][column] = fieldColumn[0];\n    board[1][column] = fieldColumn[1];\n    board[2][column] = fieldColumn[2];\n    board[3][column] = fieldColumn[3];\n\n    for (let row = 0; row < 4; row++) {\n      const tile = rows[row].children[column];\n      const number = board[row][column];\n\n      updateTile(tile, number);\n    }\n  }\n}\n\nfunction slideDown() {\n  for (let column = 0; column < 4; column++) {\n    let fieldColumn = [board[0][column], board[1][column],\n      board[2][column], board[3][column]];\n\n    fieldColumn = slide(fieldColumn.reverse()).reverse();\n\n    board[0][column] = fieldColumn[0];\n    board[1][column] = fieldColumn[1];\n    board[2][column] = fieldColumn[2];\n    board[3][column] = fieldColumn[3];\n\n    for (let row = 0; row < 4; row++) {\n      const tile = rows[row].children[column];\n      const number = board[row][column];\n\n      updateTile(tile, number);\n    }\n  }\n}\n\nfunction hasEmptyTiles() {\n  for (let r = 0; r < 4; r++) {\n    for (let c = 0; c < 4; c++) {\n      if (board[r][c] === 0) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}\n\nfunction updateTile(tile, number) {\n  tile.className = '';\n  tile.innerText = '';\n  tile.classList.add('field-cell');\n\n  if (number > 0) {\n    tile.classList.add(`field-cell--${number}`);\n    tile.innerText = number;\n  }\n}\n\nfunction addNumber() {\n  if (!hasEmptyTiles()) {\n    return;\n  }\n\n  let found = false;\n\n  while (!found) {\n    const row = Math.floor(Math.random() * 4);\n    const column = Math.floor(Math.random() * 4);\n\n    if (board[row][column] === 0) {\n      const tile = rows[row].children[column];\n      const randomNuber = newNumber[Math.floor(Math.random() * 10)];\n\n      board[row][column] = randomNuber;\n\n      tile.innerText = randomNuber;\n      tile.classList.add(`field-cell--${randomNuber}`);\n      found = true;\n    }\n  }\n}\n\nfunction moveIsPossible() {\n  if (hasEmptyTiles()) {\n    return true;\n  }\n\n  let moveX = true;\n  let moveY = true;\n\n  for (let r = 0; r < 4; r++) {\n    for (let c = 0; c < 4; c++) {\n      if (board[r][c] === board[r][c + 1]) {\n        moveX = false;\n      }\n    }\n  }\n\n  for (let c = 0; c < 4; c++) {\n    const boardColumn = [board[0][c], board[1][c], board[2][c], board[3][c]];\n\n    for (let r = 0; r < 4; r++) {\n      if (boardColumn[r] === boardColumn[r + 1]) {\n        moveY = false;\n      }\n    }\n  }\n\n  return !(moveX && moveY);\n}\n"]}